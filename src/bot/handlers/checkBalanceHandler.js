// src/bot/handlers/checkBalanceHandler.js
import TronWebModule from "tronweb";
const TronWeb = TronWebModule.default || TronWebModule;
import dotenv from "dotenv";
import { getUserWallet, getUserBalance } from "../../db/db.js";

dotenv.config();


// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üåê Select Mainnet or Shasta
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const NETWORK = process.env.NETWORK || "mainnet";
const IS_SHASTA = NETWORK.toLowerCase() === "shasta";

const tronWeb = new TronWeb({
  fullHost: IS_SHASTA
    ? "https://api.shasta.trongrid.io"
    : "https://api.trongrid.io",
  headers: { "TRON-PRO-API-KEY": process.env.TRONGRID_API_KEY },
});

export default function checkBalanceHandler(bot) {
  // üí∞ Handle "Check Balance" button
  bot.action("show_balance", async (ctx) => {
    await ctx.answerCbQuery("Fetching balance...");
    const telegramId = ctx.from.id;

    try {
      // 1Ô∏è‚É£ Fetch user wallet from DB
      const userWallet = await getUserWallet(telegramId);
      if (!userWallet?.deposit_address) {
        return ctx.reply(
          "‚ö†Ô∏è You don‚Äôt have a deposit address yet.\nUse /wallet or ‚ÄòConnect Wallet‚Äô to set one."
        );
      }

      const depositAddress = userWallet.deposit_address;

      // 2Ô∏è‚É£ Fetch on-chain TRX + USDT balances
      const balanceInSun = await tronWeb.trx.getBalance(depositAddress);
      const trxBalance = Number(tronWeb.fromSun(balanceInSun));

      let usdtBalance = 0;
      try {
        const usdtContract =
          process.env.USDT_CONTRACT_ADDRESS ||
          "TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj"; // mainnet USDT
        const contract = await tronWeb.contract().at(usdtContract);
        const bal = await contract.balanceOf(depositAddress).call();
        usdtBalance = Number(tronWeb.fromSun(bal));
      } catch (err) {
        console.log("‚ö†Ô∏è USDT check skipped:", err.message);
      }

      // 3Ô∏è‚É£ Fetch G-Token balance from DB
      const tokenBal = await getUserBalance(telegramId);

      // 4Ô∏è‚É£ Format & send reply
      const message =
        `üíº *CricPredict Wallet Summary*\n\n` +
        `üì• *Deposit Address:*\n\`${depositAddress}\`\n\n` +
        `üåê *Network:* ${IS_SHASTA ? "Shasta Testnet" : "TRON Mainnet"}\n\n` +
        `üíé *On-Chain Balances:*\n` +
        `‚Ä¢ TRX: ${trxBalance}\n` +
        `‚Ä¢ USDT: ${usdtBalance}\n\n` +
        `üéØ *In-App G-Token Balance:*\n` +
        `‚Ä¢ Tokens: ${tokenBal.tokens}\n` +
        `‚Ä¢ Bonus: ${tokenBal.bonus_tokens}\n` +
        `‚Ä¢ USDT Equivalent: ${tokenBal.usdt}\n\n` +
        `1 USDT = 1 G-Token`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (err) {
      console.error("‚ùå [CheckBalance] Error:", err);
      await ctx.reply("‚ö†Ô∏è Could not fetch wallet balance. Please try again later.");
    }
  });
}
